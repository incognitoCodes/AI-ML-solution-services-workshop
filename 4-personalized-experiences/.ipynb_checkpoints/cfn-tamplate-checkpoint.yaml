Description: >-
  (SO0170) - Deploy, deliver and maintain personalized experiences with Amazon
  Personalize. Version v1.1.0
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: Solution Configuration
        Parameters:
          - Email
      - Label:
          default: Security Configuration
        Parameters:
          - PersonalizeKmsKeyArn
    ParameterLabels:
      Email:
        default: Email
      PersonalizeKmsKeyArn:
        default: >-
          (Optional) KMS key ARN used to encrypt Datasets managed by Amazon
          Personalize
  'aws:solutions:templatename': maintaining-personalized-experiences-with-machine-learning.template
Mappings:
  Solution:
    Data:
      ID: SO0170
      Version: v1.1.0
      SendAnonymousUsageData: 'Yes'
  SourceCode:
    General:
      S3Bucket: solutions
      KeyPrefix: maintaining-personalized-experiences-with-machine-learning/v1.1.0
Parameters:
  Email:
    Type: String
    Default: melpais@amazon.com
    AllowedPattern: '(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$|^$)'
    ConstraintDescription: Must be a valid email address or blank
    Description: Email to notify with personalize workflow results
    MaxLength: 50
  PersonalizeKmsKeyArn:
    Type: String
    Default: ''
    AllowedPattern: '(^arn:.*:kms:.*:.*:key/.*$|^$)'
    Description: >-
      Provide Amazon Personalize with an alternate AWS Key Management (KMS) key
      to use to encrypt your datasets
Conditions:
  EmailProvided: !Not 
    - !Equals 
      - !Ref Email
      - ''
  PersonalizeSseKmsEnabled: !Not 
    - !Equals 
      - !Ref PersonalizeKmsKeyArn
      - ''
  SendAnonymousUsageData: !Equals 
    - !FindInMap 
      - Solution
      - Data
      - SendAnonymousUsageData
    - 'Yes'
Resources:
  PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      Content:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184.zip
  SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0:
    Type: 'AWS::Lambda::LayerVersion'
    Properties:
      Content:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0.zip
  AccessLogsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: >-
              This bucket is used as the logging destination for personalization
              data processing
  AccessLogsBucketPolicy7F77476F:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AccessLogsBucket
      PolicyDocument:
        Statement:
          - Action: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - AccessLogsBucket
                  - Arn
                - /*
            Sid: HttpsOnly
        Version: 2012-10-17
  PersonalizeBucketNotifications3328A32B:
    Type: 'Custom::S3BucketNotifications'
    Properties:
      ServiceToken: !GetAtt 
        - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
        - Arn
      BucketName: !Ref PersonalizeBucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
          - Events:
              - 's3:ObjectCreated:*'
            Filter:
              Key:
                FilterRules:
                  - Name: suffix
                    Value: .json
                  - Name: prefix
                    Value: train/
            LambdaFunctionArn: !GetAtt 
              - S3EventHandlerBAFC08A8
              - Arn
      Managed: true
    DependsOn:
      - >-
        PersonalizeBucketAllowBucketNotificationsToPersonalizeStackS3EventHandler1E615CC4FE1A168A
  PersonalizeBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref AccessLogsBucket
        LogFilePrefix: personalize-bucket-access-logs/
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  PersonalizeBucketPolicy5818C815:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref PersonalizeBucket
      PolicyDocument:
        Statement:
          - Action: '*'
            Condition:
              Bool:
                'aws:SecureTransport': false
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Join 
              - ''
              - - !GetAtt 
                  - PersonalizeBucket
                  - Arn
                - /*
            Sid: HttpsOnly
          - Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Effect: Allow
            Principal:
              Service: personalize.amazonaws.com
            Resource:
              - !Join 
                - ''
                - - !GetAtt 
                    - PersonalizeBucket
                    - Arn
                  - /*
              - !GetAtt 
                - PersonalizeBucket
                - Arn
          - Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: personalize.amazonaws.com
            Resource:
              - !Join 
                - ''
                - - !GetAtt 
                    - PersonalizeBucket
                    - Arn
                  - /*
              - !GetAtt 
                - PersonalizeBucket
                - Arn
        Version: 2012-10-17
  PersonalizeBucketAllowBucketNotificationsToPersonalizeStackS3EventHandler1E615CC4FE1A168A:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 
        - S3EventHandlerBAFC08A8
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !GetAtt 
        - PersonalizeBucket
        - Arn
  CreateConfigRole4E0B2FA5:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateConfigRoleDefaultPolicyBA07DEE7:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:Describe*'
              - 'personalize:List*'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':personalize:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':*'
        Version: 2012-10-17
      PolicyName: CreateConfigRoleDefaultPolicyBA07DEE7
      Roles:
        - !Ref CreateConfigRole4E0B2FA5
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateConfigF36C02E3:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateConfigF36C02E3.zip
      Role: !GetAtt 
        - CreateConfigRole4E0B2FA5
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 90
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateConfigRoleDefaultPolicyBA07DEE7
      - CreateConfigRole4E0B2FA5
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  PrepareInputSolutionStepprepareinputfnRole8C7731D0:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  PrepareInputSolutionStepprepareinputfnRoleDefaultPolicy86D2515F:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: PrepareInputSolutionStepprepareinputfnRoleDefaultPolicy86D2515F
      Roles:
        - !Ref PrepareInputSolutionStepprepareinputfnRole8C7731D0
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  PrepareInputSolutionStepprepareinputfn2F0001F7:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - PrepareInputSolutionStepprepareinputfn2F0001F7.zip
      Role: !GetAtt 
        - PrepareInputSolutionStepprepareinputfnRole8C7731D0
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - PrepareInputSolutionStepprepareinputfnRoleDefaultPolicy86D2515F
      - PrepareInputSolutionStepprepareinputfnRole8C7731D0
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateDatasetGroupSolutionStepcreatedatasetgroupfnRole6DF95387:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateDatasetGroupSolutionStepcreatedatasetgroupfnRoleDefaultPolicyCB0F0284:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeDatasetGroup'
              - 'personalize:CreateDatasetGroup'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':personalize:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':dataset-group/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CreateDatasetGroupSolutionStepcreatedatasetgroupfnRoleDefaultPolicyCB0F0284
      Roles:
        - !Ref CreateDatasetGroupSolutionStepcreatedatasetgroupfnRole6DF95387
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateDatasetGroupSolutionStepcreatedatasetgroupfnA7D8C46A:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateDatasetGroupSolutionStepcreatedatasetgroupfnA7D8C46A.zip
      Role: !GetAtt 
        - CreateDatasetGroupSolutionStepcreatedatasetgroupfnRole6DF95387
        - Arn
      Environment:
        Variables:
          KMS_ROLE_ARN: !If 
            - PersonalizeSseKmsEnabled
            - !GetAtt 
              - >-
                CreateDatasetGroupSolutionStepPersonalizeKMSReadWriteRole7EC5F318
              - Arn
            - ''
          KMS_KEY_ARN: !If 
            - PersonalizeSseKmsEnabled
            - !Ref PersonalizeKmsKeyArn
            - ''
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        CreateDatasetGroupSolutionStepcreatedatasetgroupfnRoleDefaultPolicyCB0F0284
      - CreateDatasetGroupSolutionStepcreatedatasetgroupfnRole6DF95387
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateDatasetGroupSolutionStepKmsResourceNameHashKmsResourceNameHashHashResourceB003B746:
    Type: 'Custom::ResourceHash'
    Properties:
      ServiceToken: !GetAtt 
        - ResourceHashFunctionb8785f5315314bfba11926aa638d7b19963F2822
        - Arn
      Purpose: PersonalizeKMSReadWriteRole
      MaxLength: 64
  CreateDatasetGroupSolutionStepPersonalizeKMSReadWriteRole7EC5F318:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: personalize.amazonaws.com
        Version: 2012-10-17
      Description: >-
        Grants Amazon Personalize access to use the specified KMS Key for
        SSE-KMS
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kms:Encrypt'
                  - 'kms:ReEncrypt'
                  - 'kms:Decrypt'
                  - 'kms:CreateGrant'
                  - 'kms:RevokeGrant'
                  - 'kms:RetireGrant'
                  - 'kms:ListGrants'
                  - 'kms:GenerateDataKey'
                  - 'kms:DescribeKey'
                Effect: Allow
                Resource: !Ref PersonalizeKmsKeyArn
            Version: 2012-10-17
          PolicyName: PersonalizeKmsWriteAccess
        - PolicyDocument:
            Statement:
              - Action:
                  - 'kms:Decrypt'
                  - 'kms:DescribeKey'
                  - 'kms:GenerateDataKey'
                Effect: Allow
                Resource: !Ref PersonalizeKmsKeyArn
            Version: 2012-10-17
          PolicyName: PersonalizeKmsReadAccess
      RoleName: !GetAtt 
        - >-
          CreateDatasetGroupSolutionStepKmsResourceNameHashKmsResourceNameHashHashResourceB003B746
        - Name
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: >-
              Resource requires consistent name across stack deployments and is
              unique per region + stack
    Condition: PersonalizeSseKmsEnabled
  CreateDatasetGroupSolutionStepPersonalizeKmsPassRole1C16D150:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'iam:PassRole'
            Effect: Allow
            Resource: !GetAtt 
              - >-
                CreateDatasetGroupSolutionStepPersonalizeKMSReadWriteRole7EC5F318
              - Arn
        Version: 2012-10-17
      Description: ''
      Path: /
      Roles:
        - !Ref CreateDatasetGroupSolutionStepcreatedatasetgroupfnRole6DF95387
    Condition: PersonalizeSseKmsEnabled
  ResourceHashFunctionb8785f5315314bfba11926aa638d7b19Role5FEB0590:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  ResourceHashFunctionb8785f5315314bfba11926aa638d7b19963F2822:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - ResourceHashFunctionb8785f5315314bfba11926aa638d7b19963F2822.zip
      Role: !GetAtt 
        - ResourceHashFunctionb8785f5315314bfba11926aa638d7b19Role5FEB0590
        - Arn
      Handler: hash.handler
      Runtime: python3.7
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    DependsOn:
      - ResourceHashFunctionb8785f5315314bfba11926aa638d7b19Role5FEB0590
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateSchemaSolutionStepcreateschemafnRoleB256E0C7:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateSchemaSolutionStepcreateschemafnRoleDefaultPolicyC3BE3F40:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeSchema'
              - 'personalize:CreateSchema'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':personalize:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':schema/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: CreateSchemaSolutionStepcreateschemafnRoleDefaultPolicyC3BE3F40
      Roles:
        - !Ref CreateSchemaSolutionStepcreateschemafnRoleB256E0C7
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateSchemaSolutionStepcreateschemafn2A793C8A:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateSchemaSolutionStepcreateschemafn2A793C8A.zip
      Role: !GetAtt 
        - CreateSchemaSolutionStepcreateschemafnRoleB256E0C7
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateSchemaSolutionStepcreateschemafnRoleDefaultPolicyC3BE3F40
      - CreateSchemaSolutionStepcreateschemafnRoleB256E0C7
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateDatasetSolutionStepcreatedatasetfnRole6648EB3D:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateDatasetSolutionStepcreatedatasetfnRoleDefaultPolicy3115CD68:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeDatasetGroup'
              - 'personalize:DescribeSchema'
              - 'personalize:CreateDataset'
              - 'personalize:DescribeDataset'
              - 'personalize:ListDatasets'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset-group/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':schema/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: CreateDatasetSolutionStepcreatedatasetfnRoleDefaultPolicy3115CD68
      Roles:
        - !Ref CreateDatasetSolutionStepcreatedatasetfnRole6648EB3D
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateDatasetSolutionStepcreatedatasetfn072D6427:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateDatasetSolutionStepcreatedatasetfn072D6427.zip
      Role: !GetAtt 
        - CreateDatasetSolutionStepcreatedatasetfnRole6648EB3D
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateDatasetSolutionStepcreatedatasetfnRoleDefaultPolicy3115CD68
      - CreateDatasetSolutionStepcreatedatasetfnRole6648EB3D
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  PersonalizeS3ReadRole7BE661E6:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: personalize.amazonaws.com
        Version: 2012-10-17
      Description: Grants Amazon Personalize access to read from S3
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Effect: Allow
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - PersonalizeBucket
                        - Arn
                      - /*
                  - !GetAtt 
                    - PersonalizeBucket
                    - Arn
            Version: 2012-10-17
          PolicyName: PersonalizeS3ReadPolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateDatasetImportJobSolutionStepcreatedatasetimportjobfnRole1D83FDE8:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateDatasetImportJobSolutionStepcreatedatasetimportjobfnRoleDefaultPolicyF6CFDA4A:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeDatasetGroup'
              - 'personalize:DescribeSchema'
              - 'personalize:DescribeDataset'
              - 'personalize:CreateDatasetImportJob'
              - 'personalize:DescribeDatasetImportJob'
              - 'personalize:ListDatasetImportJobs'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset-group/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':schema/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset-import-job/*'
          - Action:
              - 's3:GetObject*'
              - 's3:GetBucket*'
              - 's3:List*'
            Effect: Allow
            Resource:
              - !GetAtt 
                - PersonalizeBucket
                - Arn
              - !Join 
                - ''
                - - !GetAtt 
                    - PersonalizeBucket
                    - Arn
                  - /train/*
          - Action: 'iam:PassRole'
            Effect: Allow
            Resource: !GetAtt 
              - PersonalizeS3ReadRole7BE661E6
              - Arn
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CreateDatasetImportJobSolutionStepcreatedatasetimportjobfnRoleDefaultPolicyF6CFDA4A
      Roles:
        - !Ref CreateDatasetImportJobSolutionStepcreatedatasetimportjobfnRole1D83FDE8
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - >-
              CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1.zip
      Role: !GetAtt 
        - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfnRole1D83FDE8
        - Arn
      Environment:
        Variables:
          ROLE_ARN: !GetAtt 
            - PersonalizeS3ReadRole7BE661E6
            - Arn
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        CreateDatasetImportJobSolutionStepcreatedatasetimportjobfnRoleDefaultPolicyF6CFDA4A
      - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfnRole1D83FDE8
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  SNSNotificationSolutionStepsnsnotificationfnRole5A54A784:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  SNSNotificationSolutionStepsnsnotificationfnRoleDefaultPolicy96503559:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action: 'sns:Publish'
            Effect: Allow
            Resource: !Ref NotificationTopic
        Version: 2012-10-17
      PolicyName: SNSNotificationSolutionStepsnsnotificationfnRoleDefaultPolicy96503559
      Roles:
        - !Ref SNSNotificationSolutionStepsnsnotificationfnRole5A54A784
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  SNSNotificationSolutionStepsnsnotificationfn6973DEFB:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - SNSNotificationSolutionStepsnsnotificationfn6973DEFB.zip
      Role: !GetAtt 
        - SNSNotificationSolutionStepsnsnotificationfnRole5A54A784
        - Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref NotificationTopic
          SNS_TOPIC_NAME: !GetAtt 
            - NotificationTopic
            - TopicName
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - SNSNotificationSolutionStepsnsnotificationfnRoleDefaultPolicy96503559
      - SNSNotificationSolutionStepsnsnotificationfnRole5A54A784
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      DisplayName: maintaining-personalized-experiences-with-machine-learning Notifications
      KmsMasterKeyId: !Join 
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':kms:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':alias/aws/sns'
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  SNSNotificationSolutionStepNotificationConfigurationSnsTopicPolicy65B05D41:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Condition:
              StringEquals:
                'AWS:SourceOwner': !Ref 'AWS::AccountId'
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Resource: !Ref NotificationTopic
            Sid: TopicOwnerOnlyAccess
          - Action:
              - 'SNS:Publish'
              - 'SNS:RemovePermission'
              - 'SNS:SetTopicAttributes'
              - 'SNS:DeleteTopic'
              - 'SNS:ListSubscriptionsByTopic'
              - 'SNS:GetTopicAttributes'
              - 'SNS:Receive'
              - 'SNS:AddPermission'
              - 'SNS:Subscribe'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
            Effect: Deny
            Principal:
              AWS: '*'
            Resource: !Ref NotificationTopic
            Sid: HttpsOnly
        Version: 2012-10-17
      Topics:
        - !Ref NotificationTopic
  NotificationSubscription:
    Type: 'AWS::SNS::Subscription'
    Properties:
      Protocol: email
      TopicArn: !Ref NotificationTopic
      Endpoint: !Ref Email
    Condition: EmailProvided
  CreateEventTrackerSolutionStepcreateeventtrackerfnRole56E6DB08:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateEventTrackerSolutionStepcreateeventtrackerfnRoleDefaultPolicy124201CA:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeEventTracker'
              - 'personalize:ListEventTrackers'
              - 'personalize:CreateEventTracker'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset-group/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':event-tracker/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CreateEventTrackerSolutionStepcreateeventtrackerfnRoleDefaultPolicy124201CA
      Roles:
        - !Ref CreateEventTrackerSolutionStepcreateeventtrackerfnRole56E6DB08
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateEventTrackerSolutionStepcreateeventtrackerfnD0E776E2:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateEventTrackerSolutionStepcreateeventtrackerfnD0E776E2.zip
      Role: !GetAtt 
        - CreateEventTrackerSolutionStepcreateeventtrackerfnRole56E6DB08
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        CreateEventTrackerSolutionStepcreateeventtrackerfnRoleDefaultPolicy124201CA
      - CreateEventTrackerSolutionStepcreateeventtrackerfnRole56E6DB08
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateSolutionSolutionStepcreatesolutionfnRole81CBA04F:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateSolutionSolutionStepcreatesolutionfnRoleDefaultPolicyC58A687B:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeSolution'
              - 'personalize:CreateSolution'
              - 'personalize:ListSolutions'
              - 'personalize:DescribeDatasetGroup'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':solution/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset-group/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: CreateSolutionSolutionStepcreatesolutionfnRoleDefaultPolicyC58A687B
      Roles:
        - !Ref CreateSolutionSolutionStepcreatesolutionfnRole81CBA04F
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateSolutionSolutionStepcreatesolutionfn1F463E79:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateSolutionSolutionStepcreatesolutionfn1F463E79.zip
      Role: !GetAtt 
        - CreateSolutionSolutionStepcreatesolutionfnRole81CBA04F
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateSolutionSolutionStepcreatesolutionfnRoleDefaultPolicyC58A687B
      - CreateSolutionSolutionStepcreatesolutionfnRole81CBA04F
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateSolutionVersionSolutionStepcreatesolutionversionfnRoleB1FCF49E:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateSolutionVersionSolutionStepcreatesolutionversionfnRoleDefaultPolicyA22647AF:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeSolutionVersion'
              - 'personalize:CreateSolutionVersion'
              - 'personalize:ListSolutionVersions'
              - 'personalize:DescribeSolution'
              - 'personalize:GetSolutionMetrics'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':solution-version/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':solution/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CreateSolutionVersionSolutionStepcreatesolutionversionfnRoleDefaultPolicyA22647AF
      Roles:
        - !Ref CreateSolutionVersionSolutionStepcreatesolutionversionfnRoleB1FCF49E
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateSolutionVersionSolutionStepcreatesolutionversionfn0681411E:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - >-
              CreateSolutionVersionSolutionStepcreatesolutionversionfn0681411E.zip
      Role: !GetAtt 
        - CreateSolutionVersionSolutionStepcreatesolutionversionfnRoleB1FCF49E
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        CreateSolutionVersionSolutionStepcreatesolutionversionfnRoleDefaultPolicyA22647AF
      - CreateSolutionVersionSolutionStepcreatesolutionversionfnRoleB1FCF49E
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateCampaignSolutionStepcreatecampaignfnRole7348FBA1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateCampaignSolutionStepcreatecampaignfnRoleDefaultPolicyA90FB36F:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeSolutionVersion'
              - 'personalize:ListSolutionVersions'
              - 'personalize:CreateCampaign'
              - 'personalize:ListCampaigns'
              - 'personalize:DescribeCampaign'
              - 'personalize:UpdateCampaign'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':solution-version/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':solution/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':campaign/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: CreateCampaignSolutionStepcreatecampaignfnRoleDefaultPolicyA90FB36F
      Roles:
        - !Ref CreateCampaignSolutionStepcreatecampaignfnRole7348FBA1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateCampaignSolutionStepcreatecampaignfn5F83F6AB:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateCampaignSolutionStepcreatecampaignfn5F83F6AB.zip
      Role: !GetAtt 
        - CreateCampaignSolutionStepcreatecampaignfnRole7348FBA1
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateCampaignSolutionStepcreatecampaignfnRoleDefaultPolicyA90FB36F
      - CreateCampaignSolutionStepcreatecampaignfnRole7348FBA1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  PersonalizeS3ReadWriteRole2564F6B8:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: personalize.amazonaws.com
        Version: 2012-10-17
      Description: >-
        Grants Amazon Personalize access to read/write to S3 for batch inference
        jobs
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:PutObject'
                Effect: Allow
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt 
                        - PersonalizeBucket
                        - Arn
                      - /batch/*
                  - !GetAtt 
                    - PersonalizeBucket
                    - Arn
            Version: 2012-10-17
          PolicyName: PersonalizeS3ReadPolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfnRoleF9AA5858:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfnRoleDefaultPolicyBD47AE5F:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeDatasetGroup'
              - 'personalize:ListBatchInferenceJobs'
              - 'personalize:ListSolutionVersions'
              - 'personalize:ListSolutions'
              - 'personalize:CreateBatchInferenceJob'
              - 'personalize:DescribeBatchInferenceJob'
              - 'personalize:DescribeSolution'
              - 'personalize:DescribeSolutionVersion'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset-group/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':batch-inference-job/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':solution/*'
          - Action:
              - 's3:GetObject*'
              - 's3:GetBucket*'
              - 's3:List*'
              - 's3:DeleteObject*'
              - 's3:PutObject'
              - 's3:Abort*'
            Effect: Allow
            Resource:
              - !GetAtt 
                - PersonalizeBucket
                - Arn
              - !Join 
                - ''
                - - !GetAtt 
                    - PersonalizeBucket
                    - Arn
                  - /batch/*
          - Action: 'iam:PassRole'
            Effect: Allow
            Resource: !GetAtt 
              - PersonalizeS3ReadWriteRole2564F6B8
              - Arn
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfnRoleDefaultPolicyBD47AE5F
      Roles:
        - !Ref >-
          CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfnRoleF9AA5858
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfn8B4A8B4F:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - >-
              CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfn8B4A8B4F.zip
      Role: !GetAtt 
        - >-
          CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfnRoleF9AA5858
        - Arn
      Environment:
        Variables:
          ROLE_ARN: !GetAtt 
            - PersonalizeS3ReadWriteRole2564F6B8
            - Arn
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfnRoleDefaultPolicyBD47AE5F
      - CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfnRoleF9AA5858
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateFilterSolutionStepcreatefilterfnRoleE2C88F18:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateFilterSolutionStepcreatefilterfnRoleDefaultPolicy9CD13A92:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'personalize:DescribeDatasetGroup'
              - 'personalize:CreateFilter'
              - 'personalize:DescribeFilter'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':filter/*'
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':personalize:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':dataset-group/*'
          - Action: 'events:PutEvents'
            Effect: Allow
            Resource: !GetAtt 
              - Notifications87298708
              - Arn
        Version: 2012-10-17
      PolicyName: CreateFilterSolutionStepcreatefilterfnRoleDefaultPolicy9CD13A92
      Roles:
        - !Ref CreateFilterSolutionStepcreatefilterfnRoleE2C88F18
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateFilterSolutionStepcreatefilterfnF2859FD9:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateFilterSolutionStepcreatefilterfnF2859FD9.zip
      Role: !GetAtt 
        - CreateFilterSolutionStepcreatefilterfnRoleE2C88F18
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          EVENT_BUS_ARN: !GetAtt 
            - Notifications87298708
            - Arn
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateFilterSolutionStepcreatefilterfnRoleDefaultPolicy9CD13A92
      - CreateFilterSolutionStepcreatefilterfnRoleE2C88F18
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  CreateTimestampSolutionStepcreatetimestampfnRoleA3EE0EA2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  CreateTimestampSolutionStepcreatetimestampfnRoleDefaultPolicyCA043C72:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: CreateTimestampSolutionStepcreatetimestampfnRoleDefaultPolicyCA043C72
      Roles:
        - !Ref CreateTimestampSolutionStepcreatetimestampfnRoleA3EE0EA2
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  CreateTimestampSolutionStepcreatetimestampfn13532149:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - CreateTimestampSolutionStepcreatetimestampfn13532149.zip
      Role: !GetAtt 
        - CreateTimestampSolutionStepcreatetimestampfnRoleA3EE0EA2
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - CreateTimestampSolutionStepcreatetimestampfnRoleDefaultPolicyCA043C72
      - CreateTimestampSolutionStepcreatetimestampfnRoleA3EE0EA2
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  Notifications87298708:
    Type: 'AWS::Events::EventBus'
    Properties:
      Name: !Join 
        - ''
        - - aws-solutions-SO0170-
          - !Ref 'AWS::StackName'
  ScheduledDatasetImportStateMachineNameStateMachineNameNameResource555C997B:
    Type: 'Custom::ResourceName'
    Properties:
      ServiceToken: !GetAtt 
        - ResourceNameFunctiond45b185afe3444aba37517f89597d9ec4F793A21
        - Arn
      Purpose: periodic-dataset-import
      StackName: !Ref 'AWS::StackName'
      MaxLength: 80
  ScheduledDatasetImportPeriodicDatasetImportRole67B947D1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: !Join 
                - ''
                - - states.
                  - !Ref 'AWS::Region'
                  - .amazonaws.com
        Version: 2012-10-17
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  ScheduledDatasetImportPeriodicDatasetImportRoleDefaultPolicyCB7440F4:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateTimestampSolutionStepcreatetimestampfn13532149
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - PrepareInputSolutionStepprepareinputfn2F0001F7
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - >-
                CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateDatasetSolutionStepcreatedatasetfn072D6427
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateSchemaSolutionStepcreateschemafn2A793C8A
              - Arn
        Version: 2012-10-17
      PolicyName: ScheduledDatasetImportPeriodicDatasetImportRoleDefaultPolicyCB7440F4
      Roles:
        - !Ref ScheduledDatasetImportPeriodicDatasetImportRole67B947D1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
          - id: W76
            reason: >-
              Large step functions need larger IAM roles to access all managed
              AWS Lambda functions
  ScheduledDatasetImportPeriodicDatasetImport3830A3E8:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !GetAtt 
        - ScheduledDatasetImportPeriodicDatasetImportRole67B947D1
        - Arn
      DefinitionString: !Join 
        - ''
        - - >-
            {"StartAt":"Manage The Execution","States":{"Manage The
            Execution":{"Type":"Parallel","Next":"Success","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.statesError","Next":"Send
            Failure Message"}],"Branches":[{"StartAt":"Set Current
            Timestamp","States":{"Set Current Timestamp":{"Next":"Prepare
            Input","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.currentDate","Resource":"
          - !GetAtt 
            - CreateTimestampSolutionStepcreatetimestampfn13532149
            - Arn
          - >-
            "},"Prepare Input":{"Next":"Create and Import
            Datasets","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - PrepareInputSolutionStepprepareinputfn2F0001F7
            - Arn
          - >-
            "},"Create and Import
            Datasets":{"Type":"Parallel","ResultPath":null,"End":true,"Branches":[{"StartAt":"Check
            if Interactions Data Configuration Present","States":{"Check if
            Interactions Data Configuration
            Present":{"Type":"Choice","Choices":[{"Variable":"$.datasets.interactions","IsPresent":true,"Next":"Create
            Interactions Schema"}],"Default":"Interactions Not
            Provided"},"Interactions Not
            Provided":{"Type":"Pass","ResultPath":null,"End":true},"Try
            Interactions Dataset Import from
            CSV":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Interactions
            Not
            Provided"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_interactions_{}',
            $.currentDate)","datasetArn.$":"$.datasets.interactions.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/interactions.csv',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Try
            Interactions Dataset Import from
            Prefix":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Try
            Interactions Dataset Import from
            CSV"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_interactions_{}',
            $.currentDate)","datasetArn.$":"$.datasets.interactions.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/interactions',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Interactions Dataset":{"Next":"Try Interactions Dataset Import from
            Prefix","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.datasets.interactions.dataset.serviceConfig","Resource":"
          - !GetAtt 
            - CreateDatasetSolutionStepcreatedatasetfn072D6427
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"name.$":"$.datasets.interactions.dataset.serviceConfig.name","schemaArn.$":"$.datasets.interactions.schema.serviceConfig.schemaArn","datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetType":"interactions"},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Interactions Schema":{"Next":"Create Interactions
            Dataset","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.datasets.interactions.schema","OutputPath":"$","ResultPath":"$.datasets.interactions.schema.serviceConfig","Resource":"
          - !GetAtt 
            - CreateSchemaSolutionStepcreateschemafn2A793C8A
            - Arn
          - >-
            "}}},{"StartAt":"Check if Users Data Configuration
            Present","States":{"Check if Users Data Configuration
            Present":{"Type":"Choice","Choices":[{"Variable":"$.datasets.users","IsPresent":true,"Next":"Create
            Users Schema"}],"Default":"Users Not Provided"},"Users Not
            Provided":{"Type":"Pass","ResultPath":null,"End":true},"Try Users
            Dataset Import from
            CSV":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Users
            Not
            Provided"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_users_{}',
            $.currentDate)","datasetArn.$":"$.datasets.users.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/users.csv',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Try
            Users Dataset Import from
            Prefix":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Try
            Users Dataset Import from
            CSV"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_users_{}',
            $.currentDate)","datasetArn.$":"$.datasets.users.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/users',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Users Dataset":{"Next":"Try Users Dataset Import from
            Prefix","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.datasets.users.dataset.serviceConfig","Resource":"
          - !GetAtt 
            - CreateDatasetSolutionStepcreatedatasetfn072D6427
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"name.$":"$.datasets.users.dataset.serviceConfig.name","schemaArn.$":"$.datasets.users.schema.serviceConfig.schemaArn","datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetType":"users"},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Users Schema":{"Next":"Create Users
            Dataset","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.datasets.users.schema","OutputPath":"$","ResultPath":"$.datasets.users.schema.serviceConfig","Resource":"
          - !GetAtt 
            - CreateSchemaSolutionStepcreateschemafn2A793C8A
            - Arn
          - >-
            "}}},{"StartAt":"Check if Items Data Configuration
            Present","States":{"Check if Items Data Configuration
            Present":{"Type":"Choice","Choices":[{"Variable":"$.datasets.items","IsPresent":true,"Next":"Create
            Items Schema"}],"Default":"Items Not Provided"},"Items Not
            Provided":{"Type":"Pass","ResultPath":null,"End":true},"Try Items
            Dataset Import from
            CSV":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Items
            Not
            Provided"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_items_{}',
            $.currentDate)","datasetArn.$":"$.datasets.items.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/items.csv',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Try
            Items Dataset Import from
            Prefix":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Try
            Items Dataset Import from
            CSV"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_items_{}',
            $.currentDate)","datasetArn.$":"$.datasets.items.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/items',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Items Dataset":{"Next":"Try Items Dataset Import from
            Prefix","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.datasets.items.dataset.serviceConfig","Resource":"
          - !GetAtt 
            - CreateDatasetSolutionStepcreatedatasetfn072D6427
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"name.$":"$.datasets.items.dataset.serviceConfig.name","schemaArn.$":"$.datasets.items.schema.serviceConfig.schemaArn","datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetType":"items"},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Items Schema":{"Next":"Create Items
            Dataset","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.datasets.items.schema","OutputPath":"$","ResultPath":"$.datasets.items.schema.serviceConfig","Resource":"
          - !GetAtt 
            - CreateSchemaSolutionStepcreateschemafn2A793C8A
            - Arn
          - >-
            "}}}]}}}]},"Success":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
            - Arn
          - >-
            ","Parameters":{"datasetGroup.$":"$[0].datasetGroup.serviceConfig.name"}},"Send
            Failure
            Message":{"Next":"Failure","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
            - Arn
          - >-
            ","Parameters":{"datasetGroup.$":"$.datasetGroup.serviceConfig.name","statesError.$":"$.statesError"}},"Failure":{"Type":"Fail"}}}
      StateMachineName: !GetAtt 
        - >-
          ScheduledDatasetImportStateMachineNameStateMachineNameNameResource555C997B
        - Name
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    DependsOn:
      - ScheduledDatasetImportPeriodicDatasetImportRoleDefaultPolicyCB7440F4
      - ScheduledDatasetImportPeriodicDatasetImportRole67B947D1
  ResourceNameFunctiond45b185afe3444aba37517f89597d9ecRoleE234DCDF:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  ResourceNameFunctiond45b185afe3444aba37517f89597d9ec4F793A21:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - ResourceNameFunctiond45b185afe3444aba37517f89597d9ec4F793A21.zip
      Role: !GetAtt 
        - ResourceNameFunctiond45b185afe3444aba37517f89597d9ecRoleE234DCDF
        - Arn
      Handler: name.handler
      Runtime: python3.7
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    DependsOn:
      - ResourceNameFunctiond45b185afe3444aba37517f89597d9ecRoleE234DCDF
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  ScheduledSolutionMaintenanceStateMachineNameStateMachineNameNameResource93326218:
    Type: 'Custom::ResourceName'
    Properties:
      ServiceToken: !GetAtt 
        - ResourceNameFunctiond45b185afe3444aba37517f89597d9ec4F793A21
        - Arn
      Purpose: periodic-solution-maintenance
      StackName: !Ref 'AWS::StackName'
      MaxLength: 80
  ScheduledSolutionMaintenancePeriodicSolutionMaintenanceRoleBB209E6E:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: !Join 
                - ''
                - - states.
                  - !Ref 'AWS::Region'
                  - .amazonaws.com
        Version: 2012-10-17
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  ScheduledSolutionMaintenancePeriodicSolutionMaintenanceRoleDefaultPolicyAF675022:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateTimestampSolutionStepcreatetimestampfn13532149
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - PrepareInputSolutionStepprepareinputfn2F0001F7
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateSolutionSolutionStepcreatesolutionfn1F463E79
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateSolutionVersionSolutionStepcreatesolutionversionfn0681411E
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateCampaignSolutionStepcreatecampaignfn5F83F6AB
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - >-
                CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfn8B4A8B4F
              - Arn
        Version: 2012-10-17
      PolicyName: >-
        ScheduledSolutionMaintenancePeriodicSolutionMaintenanceRoleDefaultPolicyAF675022
      Roles:
        - !Ref ScheduledSolutionMaintenancePeriodicSolutionMaintenanceRoleBB209E6E
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
          - id: W76
            reason: >-
              Large step functions need larger IAM roles to access all managed
              AWS Lambda functions
  ScheduledSolutionMaintenancePeriodicSolutionMaintenance814E56C3:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !GetAtt 
        - ScheduledSolutionMaintenancePeriodicSolutionMaintenanceRoleBB209E6E
        - Arn
      DefinitionString: !Join 
        - ''
        - - >-
            {"StartAt":"Manage Solution Maintenance","States":{"Manage Solution
            Maintenance":{"Type":"Parallel","Next":"Success","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.statesError","Next":"Send
            Failure Message"}],"Branches":[{"StartAt":"Set Current
            Timestamp","States":{"Set Current Timestamp":{"Next":"Prepare
            Input","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.currentDate","Resource":"
          - !GetAtt 
            - CreateTimestampSolutionStepcreatetimestampfn13532149
            - Arn
          - >-
            "},"Prepare Input":{"Next":"Check for
            Solutions","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - PrepareInputSolutionStepprepareinputfn2F0001F7
            - Arn
          - >-
            "},"Check for
            Solutions":{"Type":"Choice","Choices":[{"Variable":"$.solutions[0]","IsPresent":true,"Next":"Create
            Solutions"}],"Default":"Solutions not Provided"},"Solutions not
            Provided":{"Type":"Pass","End":true},"Create
            Solutions":{"Type":"Map","ResultPath":null,"End":true,"Parameters":{"datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetGroupName.$":"$.datasetGroup.serviceConfig.name","solution.$":"$$.Map.Item.Value","bucket.$":"$.bucket","currentDate.$":"$.currentDate"},"Iterator":{"StartAt":"Prepare
            Solution Input Data","States":{"Prepare Solution Input
            Data":{"Type":"Pass","ResultPath":"$.solution.serviceConfig.datasetGroupArn","InputPath":"$.datasetGroupArn","Next":"Create
            Solution"},"Create Solution":{"Next":"Prepare Solution Output
            Data","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.solution","OutputPath":"$","ResultPath":"$._tmp","ResultSelector":{"solutionArn.$":"$.solutionArn"},"Resource":"
          - !GetAtt 
            - CreateSolutionSolutionStepcreatesolutionfn1F463E79
            - Arn
          - >-
            "},"Prepare Solution Output
            Data":{"Type":"Pass","ResultPath":"$.solution.serviceConfig.solutionArn","InputPath":"$._tmp.solutionArn","Next":"Check
            for Solution Version"},"Check for Solution
            Version":{"Type":"Choice","Choices":[{"Variable":"$.solution.solutionVersion","IsPresent":false,"Next":"Prepare
            Solution Version Input Data"}],"Default":"Create Solution
            Version"},"Create Solution Version":{"Next":"Prepare Solution
            Version Output
            Data","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["SolutionVersionPending"],"ResultPath":"$.solutionVersionPending","Next":"Save
            Solution Version
            ID"}],"Type":"Task","InputPath":"$.solution.solutionVersion","OutputPath":"$","ResultPath":"$._tmp","ResultSelector":{"solutionVersionArn.$":"$.solutionVersionArn"},"Resource":"
          - !GetAtt 
            - CreateSolutionVersionSolutionStepcreatesolutionversionfn0681411E
            - Arn
          - >-
            "},"Set Solution Version
            ID":{"Type":"Pass","ResultPath":"$.solution.solutionVersion","Parameters":{"serviceConfig":{"trainingMode.$":"$.solution.solutionVersion.serviceConfig.trainingMode","solutionArn.$":"$.solution.solutionVersion.serviceConfig.solutionArn"},"workflowConfig":{"maxAge.$":"$.solution.solutionVersion.workflowConfig.maxAge","solutionVersionArn.$":"$._tmp.errorInfo.errorMessage","timeStarted.$":"$$.State.EnteredTime"}},"Next":"Create
            Solution Version"},"Save Solution Version
            ID":{"Type":"Pass","ResultPath":"$._tmp","Parameters":{"errorInfo.$":"States.StringToJson($.solutionVersionPending.Cause)"},"Next":"Set
            Solution Version ID"},"Prepare Solution Version Input
            Data":{"Type":"Pass","ResultPath":"$.solution.solutionVersion","Parameters":{"serviceConfig":{"solutionArn.$":"$.solution.serviceConfig.solutionArn","trainingMode":"FULL"},"workflowConfig":{"maxAge":"365
            days","timeStarted.$":"$$.State.EnteredTime"}},"Next":"Create
            Solution Version"},"Prepare Solution Version Output
            Data":{"Type":"Pass","ResultPath":"$.solution.solutionVersion.serviceConfig.solutionVersionArn","InputPath":"$._tmp.solutionVersionArn","Next":"Create
            Campaigns and Batch Inference Jobs"},"Create Campaigns and Batch
            Inference
            Jobs":{"Type":"Parallel","ResultPath":null,"End":true,"Branches":[{"StartAt":"Check
            for Campaigns","States":{"Check for
            Campaigns":{"Type":"Choice","Choices":[{"Variable":"$.solution.campaigns[0]","IsPresent":true,"Next":"Create
            Campaigns"}],"Default":"Campaigns not Provided"},"Campaigns not
            Provided":{"Type":"Pass","End":true},"Create
            Campaigns":{"Type":"Map","End":true,"Parameters":{"solutionVersionArn.$":"$.solution.solutionVersion.serviceConfig.solutionVersionArn","campaign.$":"$$.Map.Item.Value"},"Iterator":{"StartAt":"Prepare
            Campaign Input Data","States":{"Prepare Campaign Input
            Data":{"Type":"Pass","ResultPath":"$.campaign.serviceConfig.solutionVersionArn","InputPath":"$.solutionVersionArn","Next":"Create
            Campaign"},"Create
            Campaign":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$.campaign","OutputPath":"$","ResultPath":"$.campaign.serviceConfig","Resource":"
          - !GetAtt 
            - CreateCampaignSolutionStepcreatecampaignfn5F83F6AB
            - Arn
          - >-
            "}}},"ItemsPath":"$.solution.campaigns"}}},{"StartAt":"Check for
            Batch Inference Jobs","States":{"Check for Batch Inference
            Jobs":{"Type":"Choice","Choices":[{"Variable":"$.solution.batchInferenceJobs[0]","IsPresent":true,"Next":"Create
            Batch Inference Jobs"}],"Default":"Batch Inference Jobs Not
            Provided"},"Batch Inference Jobs Not
            Provided":{"Type":"Pass","End":true},"Create Batch Inference
            Jobs":{"Type":"Map","End":true,"Parameters":{"solutionVersionArn.$":"$.solution.solutionVersion.serviceConfig.solutionVersionArn","batchInferenceJob.$":"$$.Map.Item.Value","batchInferenceJobName.$":"States.Format('batch_{}_{}',
            $.solution.serviceConfig.name,
            $.currentDate)","bucket.$":"$.bucket","currentDate.$":"$.currentDate","datasetGroupName.$":"$.datasetGroupName","datasetGroupArn.$":"$.datasetGroupArn","solution.$":"$.solution"},"Iterator":{"StartAt":"Set
            Batch Inference Job Input Data - Job Name","States":{"Set Batch
            Inference Job Input Data - Job
            Name":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.jobName","InputPath":"$.batchInferenceJobName","Next":"Set
            Batch Inference Job Input Data - Solution Version ARN"},"Set Batch
            Inference Job Input Data - Solution Version
            ARN":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.solutionVersionArn","InputPath":"$.solutionVersionArn","Next":"Set
            Batch Inference Job Input Data - Job Input"},"Set Batch Inference
            Job Input Data - Job
            Input":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.jobInput","Parameters":{"s3DataSource":{"path.$":"States.Format('s3://{}/batch/{}/{}/job_config.json',
            $.bucket.name, $.datasetGroupName,
            $.solution.serviceConfig.name)"}},"Next":"Set Batch Inference Job
            Input Data - Job Output"},"Set Batch Inference Job Input Data - Job
            Output":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.jobOutput","Parameters":{"s3DataDestination":{"path.$":"States.Format('s3://{}/batch/{}/{}/{}/',
            $.bucket.name, $.datasetGroupName, $.solution.serviceConfig.name,
            $.batchInferenceJobName)"}},"Next":"Create Batch Inference
            Job"},"Create Batch Inference
            Job":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$.batchInferenceJob","OutputPath":"$","ResultPath":"$.batchInferenceJob.serviceConfig","Resource":"
          - !GetAtt 
            - >-
              CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfn8B4A8B4F
            - Arn
          - >-
            "}}},"ItemsPath":"$.solution.batchInferenceJobs"}}}]}}},"ItemsPath":"$.solutions"}}}]},"Success":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
            - Arn
          - >-
            ","Parameters":{"datasetGroup.$":"$[0].datasetGroup.serviceConfig.name"}},"Send
            Failure
            Message":{"Next":"Failure","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
            - Arn
          - >-
            ","Parameters":{"datasetGroup.$":"$.datasetGroup.serviceConfig.name","statesError.$":"$.statesError"}},"Failure":{"Type":"Fail"}}}
      StateMachineName: !GetAtt 
        - >-
          ScheduledSolutionMaintenanceStateMachineNameStateMachineNameNameResource93326218
        - Name
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    DependsOn:
      - >-
        ScheduledSolutionMaintenancePeriodicSolutionMaintenanceRoleDefaultPolicyAF675022
      - ScheduledSolutionMaintenancePeriodicSolutionMaintenanceRoleBB209E6E
  SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532:
    Type: 'Custom::ResourceName'
    Properties:
      ServiceToken: !GetAtt 
        - ResourceNameFunctiond45b185afe3444aba37517f89597d9ec4F793A21
        - Arn
      Purpose: personalize-scheduler
      StackName: !Ref 'AWS::StackName'
      MaxLength: 80
  SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfnRole34D2C4CB:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfnRoleDefaultPolicyB60166B5:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'states:StartExecution'
              - 'states:ListExecutions'
              - 'states:StopExecution'
              - 'states:DescribeExecution'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':states:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':stateMachine:'
                  - !GetAtt 
                    - >-
                      SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                    - Name
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':states:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':execution:'
                  - !GetAtt 
                    - >-
                      SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                    - Name
                  - ':*'
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - PersonalizeScheduledTasks
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: >-
        SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfnRoleDefaultPolicyB60166B5
      Roles:
        - !Ref >-
          SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfnRole34D2C4CB
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfn7FCB3878:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - >-
              SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfn7FCB3878.zip
      Role: !GetAtt 
        - >-
          SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfnRole34D2C4CB
        - Arn
      Environment:
        Variables:
          DDB_SCHEDULER_STEPFUNCTION: !Join 
            - ''
            - - 'arn:'
              - !Ref 'AWS::Partition'
              - ':states:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':stateMachine:'
              - !GetAtt 
                - >-
                  SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                - Name
          DDB_SCHEDULES_TABLE: !Ref PersonalizeScheduledTasks
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.create_schedule
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfnRoleDefaultPolicyB60166B5
      - >-
        SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfnRole34D2C4CB
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfnRole4CEBAB3C:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfnRoleDefaultPolicyD3C1A045:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action: 'states:StartExecution'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':states:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':stateMachine:'
                - !GetAtt 
                  - >-
                    SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                  - Name
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:ConditionCheckItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - PersonalizeScheduledTasks
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: >-
        SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfnRoleDefaultPolicyD3C1A045
      Roles:
        - !Ref SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfnRole4CEBAB3C
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfn98E8735D:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - >-
              SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfn98E8735D.zip
      Role: !GetAtt 
        - SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfnRole4CEBAB3C
        - Arn
      Environment:
        Variables:
          DDB_SCHEDULER_STEPFUNCTION: !Join 
            - ''
            - - 'arn:'
              - !Ref 'AWS::Partition'
              - ':states:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':stateMachine:'
              - !GetAtt 
                - >-
                  SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                - Name
          DDB_SCHEDULES_TABLE: !Ref PersonalizeScheduledTasks
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.read_schedule
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfnRoleDefaultPolicyD3C1A045
      - SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfnRole4CEBAB3C
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnRole3FA34844:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnRoleDefaultPolicy9FB6244F:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'states:StartExecution'
              - 'states:ListExecutions'
              - 'states:StopExecution'
              - 'states:DescribeExecution'
            Effect: Allow
            Resource:
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':states:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':stateMachine:'
                  - !GetAtt 
                    - >-
                      SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                    - Name
              - !Join 
                - ''
                - - 'arn:'
                  - !Ref 'AWS::Partition'
                  - ':states:'
                  - !Ref 'AWS::Region'
                  - ':'
                  - !Ref 'AWS::AccountId'
                  - ':execution:'
                  - !GetAtt 
                    - >-
                      SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                    - Name
                  - ':*'
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - PersonalizeScheduledTasks
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: >-
        SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnRoleDefaultPolicy9FB6244F
      Roles:
        - !Ref >-
          SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnRole3FA34844
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnB0D5DE79:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - >-
              SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnB0D5DE79.zip
      Role: !GetAtt 
        - >-
          SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnRole3FA34844
        - Arn
      Environment:
        Variables:
          DDB_SCHEDULER_STEPFUNCTION: !Join 
            - ''
            - - 'arn:'
              - !Ref 'AWS::Partition'
              - ':states:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':stateMachine:'
              - !GetAtt 
                - >-
                  SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                - Name
          DDB_SCHEDULES_TABLE: !Ref PersonalizeScheduledTasks
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.update_schedule
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnRoleDefaultPolicy9FB6244F
      - >-
        SchedulerupdatescheduledtaskSolutionStepupdatescheduledtaskfnRole3FA34844
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfnRole89540B14:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfnRoleDefaultPolicy9BCCB485:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action: 'states:StartExecution'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':states:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':stateMachine:'
                - !GetAtt 
                  - >-
                    SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                  - Name
          - Action:
              - 'dynamodb:BatchGetItem'
              - 'dynamodb:GetRecords'
              - 'dynamodb:GetShardIterator'
              - 'dynamodb:Query'
              - 'dynamodb:GetItem'
              - 'dynamodb:Scan'
              - 'dynamodb:ConditionCheckItem'
              - 'dynamodb:BatchWriteItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
              - 'dynamodb:DeleteItem'
            Effect: Allow
            Resource:
              - !GetAtt 
                - PersonalizeScheduledTasks
                - Arn
              - !Ref 'AWS::NoValue'
        Version: 2012-10-17
      PolicyName: >-
        SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfnRoleDefaultPolicy9BCCB485
      Roles:
        - !Ref >-
          SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfnRole89540B14
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfn273DB192:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - >-
              SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfn273DB192.zip
      Role: !GetAtt 
        - >-
          SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfnRole89540B14
        - Arn
      Environment:
        Variables:
          DDB_SCHEDULER_STEPFUNCTION: !Join 
            - ''
            - - 'arn:'
              - !Ref 'AWS::Partition'
              - ':states:'
              - !Ref 'AWS::Region'
              - ':'
              - !Ref 'AWS::AccountId'
              - ':stateMachine:'
              - !GetAtt 
                - >-
                  SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                - Name
          DDB_SCHEDULES_TABLE: !Ref PersonalizeScheduledTasks
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: handler.delete_schedule
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - >-
        SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfnRoleDefaultPolicy9BCCB485
      - >-
        SchedulerdeletescheduledtaskSolutionStepdeletescheduledtaskfnRole89540B14
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  SchedulerSchedulerStateMachineRoleEDC22AEC:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: !Join 
                - ''
                - - states.
                  - !Ref 'AWS::Region'
                  - .amazonaws.com
        Version: 2012-10-17
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  SchedulerSchedulerStateMachineRoleDefaultPolicy8CC45CD8:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
            Effect: Allow
            Resource: '*'
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - >-
                SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfn98E8735D
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - GetNextTimestamp3AB5D155
              - Arn
          - Action: 'states:StartExecution'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':states:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':stateMachine:'
                - !GetAtt 
                  - >-
                    SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
                  - Name
          - Action:
              - 'states:DescribeExecution'
              - 'states:StopExecution'
            Effect: Allow
            Resource: '*'
          - Action:
              - 'events:PutTargets'
              - 'events:PutRule'
              - 'events:DescribeRule'
            Effect: Allow
            Resource: !Join 
              - ''
              - - 'arn:'
                - !Ref 'AWS::Partition'
                - ':events:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':rule/StepFunctionsGetEventsForStepFunctionsExecutionRule'
          - Action: 'states:StartExecution'
            Effect: Allow
            Resource: !Ref ScheduledDatasetImportPeriodicDatasetImport3830A3E8
          - Action: 'states:StartExecution'
            Effect: Allow
            Resource: !Ref ScheduledSolutionMaintenancePeriodicSolutionMaintenance814E56C3
        Version: 2012-10-17
      PolicyName: SchedulerSchedulerStateMachineRoleDefaultPolicy8CC45CD8
      Roles:
        - !Ref SchedulerSchedulerStateMachineRoleEDC22AEC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: >-
              IAM policy for nested synchronous invocation of step functions
              requires * on Describe and Stop Execution
          - id: W76
            reason: >-
              Large step functions need larger IAM roles to access all managed
              AWS Lambda functions
  SchedulerSchedulerStateMachine2F63DF01:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !GetAtt 
        - SchedulerSchedulerStateMachineRoleEDC22AEC
        - Arn
      DefinitionString: !Join 
        - ''
        - - >-
            {"StartAt":"Load Scheduled Task","States":{"Load Scheduled
            Task":{"Next":"Trigger Time
            Provided?","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.task","Resource":"
          - !GetAtt 
            - SchedulerreadscheduledtaskSolutionStepreadscheduledtaskfn98E8735D
            - Arn
          - >-
            ","Parameters":{"name.$":"$.name"}},"Trigger Time
            Provided?":{"Type":"Choice","Choices":[{"Variable":"$.trigger_at","IsPresent":false,"Next":"Get
            Trigger Time"}],"Default":"Wait Until Schedule Trigger"},"Wait Until
            Schedule
            Trigger":{"Type":"Wait","TimestampPath":"$.trigger_at","Next":"Invoke
            Step Function"},"Get Trigger Time":{"Next":"Wait Until Schedule
            Trigger","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":"$.trigger_at","Resource":"
          - !GetAtt 
            - GetNextTimestamp3AB5D155
            - Arn
          - >-
            ","Parameters":{"schedule.$":"$.task.schedule"}},"Invoke Step
            Function":{"Next":"Get Next Trigger
            Time","Type":"Task","Resource":"arn:aws:states:::states:startExecution.sync:2","Parameters":{"StateMachineArn.$":"$.task.state_machine.arn","Input.$":"$.task.state_machine.input","Name.$":"$.task.next_task_id"},"Retry":[{"ErrorEquals":["StepFunctions.ExecutionLimitExceeded"]}],"ResultPath":"$.startExecutionResult","ResultSelector":{"ExecutionArn.$":"$.ExecutionArn"},"Catch":[{"ErrorEquals":["States.TaskFailed"],"Next":"Get
            Next Trigger Time","ResultPath":"$.startExecutionResult"}]},"Get
            Next Trigger Time":{"Next":"Run Next Scheduled
            Task","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","ResultPath":"$.trigger_at","Resource":"
          - !GetAtt 
            - GetNextTimestamp3AB5D155
            - Arn
          - >-
            ","Parameters":{"schedule.$":"$.task.schedule"}},"Run Next Scheduled
            Task":{"End":true,"Type":"Task","Resource":"arn:aws:states:::states:startExecution","Parameters":{"StateMachineArn":"arn:
          - !Ref 'AWS::Partition'
          - ':states:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':stateMachine:'
          - !GetAtt 
            - >-
              SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
            - Name
          - >-
            ","Input":{"name.$":"$.name","trigger_at.$":"$.trigger_at"},"Name.$":"$.task.next_task_id"},"Retry":[{"ErrorEquals":["StepFunctions.ExecutionLimitExceeded"]}],"ResultPath":"$.startExecutionResult","ResultSelector":{"ExecutionArn.$":"$.ExecutionArn"}}}}
      StateMachineName: !GetAtt 
        - >-
          SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
        - Name
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      TracingConfiguration:
        Enabled: true
    DependsOn:
      - SchedulerSchedulerStateMachineRoleDefaultPolicy8CC45CD8
      - SchedulerSchedulerStateMachineRoleEDC22AEC
  GetNextTimestampRole9D72EBF2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  GetNextTimestampRoleDefaultPolicy58578691:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: GetNextTimestampRoleDefaultPolicy58578691
      Roles:
        - !Ref GetNextTimestampRole9D72EBF2
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  GetNextTimestamp3AB5D155:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - GetNextTimestamp3AB5D155.zip
      Role: !GetAtt 
        - GetNextTimestampRole9D72EBF2
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
      Handler: com.amazonaws.solutions.schedule_sfn_task.HandleScheduleEvent
      Runtime: java11
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      TracingConfig:
        Mode: Active
    DependsOn:
      - GetNextTimestampRoleDefaultPolicy58578691
      - GetNextTimestampRole9D72EBF2
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  PersonalizeScheduledTasks:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      KeySchema:
        - AttributeName: name
          KeyType: HASH
        - AttributeName: version
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
        - AttributeName: version
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
  StateMachineNameStateMachineNameNameResource5B98B370:
    Type: 'Custom::ResourceName'
    Properties:
      ServiceToken: !GetAtt 
        - ResourceNameFunctiond45b185afe3444aba37517f89597d9ec4F793A21
        - Arn
      Purpose: personalize-workflow
      StackName: !Ref 'AWS::StackName'
      MaxLength: 80
  PersonalizeStateMachineRole801F53E1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: !Join 
                - ''
                - - states.
                  - !Ref 'AWS::Region'
                  - .amazonaws.com
        Version: 2012-10-17
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  PersonalizeStateMachineRoleDefaultPolicy849E454B:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
              - 'xray:GetSamplingRules'
              - 'xray:GetSamplingTargets'
            Effect: Allow
            Resource: '*'
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - PrepareInputSolutionStepprepareinputfn2F0001F7
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateDatasetGroupSolutionStepcreatedatasetgroupfnA7D8C46A
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - >-
                SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfn7FCB3878
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateEventTrackerSolutionStepcreateeventtrackerfnD0E776E2
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateFilterSolutionStepcreatefilterfnF2859FD9
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateSolutionSolutionStepcreatesolutionfn1F463E79
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateSolutionVersionSolutionStepcreatesolutionversionfn0681411E
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateCampaignSolutionStepcreatecampaignfn5F83F6AB
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - >-
                CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfn8B4A8B4F
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - >-
                CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateDatasetSolutionStepcreatedatasetfn072D6427
              - Arn
          - Action: 'lambda:InvokeFunction'
            Effect: Allow
            Resource: !GetAtt 
              - CreateSchemaSolutionStepcreateschemafn2A793C8A
              - Arn
        Version: 2012-10-17
      PolicyName: PersonalizeStateMachineRoleDefaultPolicy849E454B
      Roles:
        - !Ref PersonalizeStateMachineRole801F53E1
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
          - id: W76
            reason: >-
              Large step functions need larger IAM roles to access all managed
              AWS Lambda functions
  PersonalizeStateMachine739DC329:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      RoleArn: !GetAtt 
        - PersonalizeStateMachineRole801F53E1
        - Arn
      DefinitionString: !Join 
        - ''
        - - >-
            {"StartAt":"Manage The Execution","States":{"Manage The
            Execution":{"Type":"Parallel","Next":"Success","Catch":[{"ErrorEquals":["States.ALL"],"ResultPath":"$.statesError","Next":"Send
            Failure Message"}],"Branches":[{"StartAt":"Prepare
            Input","States":{"Prepare Input":{"Next":"Create Dataset
            Group","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - PrepareInputSolutionStepprepareinputfn2F0001F7
            - Arn
          - >-
            "},"Create Dataset Group":{"Next":"Create and Import
            Datasets","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":30,"BackoffRate":1.02}],"Type":"Task","InputPath":"$.datasetGroup","OutputPath":"$","ResultPath":"$.datasetGroup.serviceConfig","Resource":"
          - !GetAtt 
            - CreateDatasetGroupSolutionStepcreatedatasetgroupfnA7D8C46A
            - Arn
          - >-
            "},"Create and Import
            Datasets":{"Type":"Parallel","ResultPath":null,"Next":"Check if
            Personalize Dataset Import Schedule
            Required","Branches":[{"StartAt":"Check if Interactions Data
            Configuration Present","States":{"Check if Interactions Data
            Configuration
            Present":{"Type":"Choice","Choices":[{"Variable":"$.datasets.interactions","IsPresent":true,"Next":"Create
            Interactions Schema"}],"Default":"Interactions Not
            Provided"},"Interactions Not
            Provided":{"Type":"Pass","ResultPath":null,"End":true},"Try
            Interactions Dataset Import from
            CSV":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Interactions
            Not
            Provided"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_interactions_{}',
            $.currentDate)","datasetArn.$":"$.datasets.interactions.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/interactions.csv',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Try
            Interactions Dataset Import from
            Prefix":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Try
            Interactions Dataset Import from
            CSV"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_interactions_{}',
            $.currentDate)","datasetArn.$":"$.datasets.interactions.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/interactions',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Interactions Dataset":{"Next":"Try Interactions Dataset Import from
            Prefix","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.datasets.interactions.dataset.serviceConfig","Resource":"
          - !GetAtt 
            - CreateDatasetSolutionStepcreatedatasetfn072D6427
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"name.$":"$.datasets.interactions.dataset.serviceConfig.name","schemaArn.$":"$.datasets.interactions.schema.serviceConfig.schemaArn","datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetType":"interactions"},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Interactions Schema":{"Next":"Create Interactions
            Dataset","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.datasets.interactions.schema","OutputPath":"$","ResultPath":"$.datasets.interactions.schema.serviceConfig","Resource":"
          - !GetAtt 
            - CreateSchemaSolutionStepcreateschemafn2A793C8A
            - Arn
          - >-
            "}}},{"StartAt":"Check if Users Data Configuration
            Present","States":{"Check if Users Data Configuration
            Present":{"Type":"Choice","Choices":[{"Variable":"$.datasets.users","IsPresent":true,"Next":"Create
            Users Schema"}],"Default":"Users Not Provided"},"Users Not
            Provided":{"Type":"Pass","ResultPath":null,"End":true},"Try Users
            Dataset Import from
            CSV":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Users
            Not
            Provided"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_users_{}',
            $.currentDate)","datasetArn.$":"$.datasets.users.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/users.csv',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Try
            Users Dataset Import from
            Prefix":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Try
            Users Dataset Import from
            CSV"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_users_{}',
            $.currentDate)","datasetArn.$":"$.datasets.users.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/users',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Users Dataset":{"Next":"Try Users Dataset Import from
            Prefix","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.datasets.users.dataset.serviceConfig","Resource":"
          - !GetAtt 
            - CreateDatasetSolutionStepcreatedatasetfn072D6427
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"name.$":"$.datasets.users.dataset.serviceConfig.name","schemaArn.$":"$.datasets.users.schema.serviceConfig.schemaArn","datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetType":"users"},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Users Schema":{"Next":"Create Users
            Dataset","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.datasets.users.schema","OutputPath":"$","ResultPath":"$.datasets.users.schema.serviceConfig","Resource":"
          - !GetAtt 
            - CreateSchemaSolutionStepcreateschemafn2A793C8A
            - Arn
          - >-
            "}}},{"StartAt":"Check if Items Data Configuration
            Present","States":{"Check if Items Data Configuration
            Present":{"Type":"Choice","Choices":[{"Variable":"$.datasets.items","IsPresent":true,"Next":"Create
            Items Schema"}],"Default":"Items Not Provided"},"Items Not
            Provided":{"Type":"Pass","ResultPath":null,"End":true},"Try Items
            Dataset Import from
            CSV":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Items
            Not
            Provided"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_items_{}',
            $.currentDate)","datasetArn.$":"$.datasets.items.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/items.csv',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Try
            Items Dataset Import from
            Prefix":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["NoSuchKey"],"ResultPath":null,"Next":"Try
            Items Dataset Import from
            CSV"}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - CreateDatasetImportJobSolutionStepcreatedatasetimportjobfn4FF1A8F1
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"jobName.$":"States.Format('dataset_import_items_{}',
            $.currentDate)","datasetArn.$":"$.datasets.items.dataset.serviceConfig.datasetArn","dataSource":{"dataLocation.$":"States.Format('s3://{}/{}/items',
            $.bucket.name,
            $.bucket.key)"}},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Items Dataset":{"Next":"Try Items Dataset Import from
            Prefix","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.datasets.items.dataset.serviceConfig","Resource":"
          - !GetAtt 
            - CreateDatasetSolutionStepcreatedatasetfn072D6427
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"name.$":"$.datasets.items.dataset.serviceConfig.name","schemaArn.$":"$.datasets.items.schema.serviceConfig.schemaArn","datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetType":"items"},"workflowConfig":{"maxAge.$":"$.datasetGroup.workflowConfig.maxAge","timeStarted.$":"$$.State.EnteredTime"}}},"Create
            Items Schema":{"Next":"Create Items
            Dataset","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.datasets.items.schema","OutputPath":"$","ResultPath":"$.datasets.items.schema.serviceConfig","Resource":"
          - !GetAtt 
            - CreateSchemaSolutionStepcreateschemafn2A793C8A
            - Arn
          - >-
            "}}}]},"Check if Personalize Dataset Import Schedule
            Required":{"Type":"Choice","Choices":[{"Variable":"$.datasetGroup.workflowConfig.schedules.import","IsPresent":true,"Next":"Create
            Schedule For Personalize Dataset Import"}],"Default":"Personalize
            Dataset Import Schedule Not Required"},"Personalize Dataset Import
            Schedule Not Required":{"Type":"Pass","Next":"Check if Event Tracker
            Required"},"Check if Event Tracker
            Required":{"Type":"Choice","Choices":[{"Variable":"$.eventTracker.serviceConfig.name","IsPresent":true,"Next":"Create
            Event Tracker"}],"Default":"Event Tracker not Required"},"Create
            Schedule For Personalize Dataset Import":{"Next":"Check if Event
            Tracker
            Required","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - >-
              SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfn7FCB3878
            - Arn
          - >-
            ","Parameters":{"name.$":"States.Format('personalize-dataset-import-{}',
            $.datasetGroup.serviceConfig.name)","schedule.$":"$.datasetGroup.workflowConfig.schedules.import","state_machine":{"arn":"
          - !Ref ScheduledDatasetImportPeriodicDatasetImport3830A3E8
          - >-
            ","input":{"datasetGroup":{"serviceConfig.$":"$.datasetGroup.serviceConfig","workflowConfig":{"maxAge":"1
            second"}},"datasets.$":"$.datasets","bucket.$":"$.bucket"}}}},"Event
            Tracker not Required":{"Type":"Pass","Next":"Check if Filters
            Required"},"Check if Filters
            Required":{"Type":"Choice","Choices":[{"Variable":"$.filters[0]","IsPresent":true,"Next":"Create
            Filters"}],"Default":"Filters Not Required"},"Create Event
            Tracker":{"Next":"Check if Filters
            Required","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":8,"MaxAttempts":15,"BackoffRate":1.25}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$.eventTracker.serviceConfig","Resource":"
          - !GetAtt 
            - CreateEventTrackerSolutionStepcreateeventtrackerfnD0E776E2
            - Arn
          - >-
            ","Parameters":{"serviceConfig":{"name.$":"$.eventTracker.serviceConfig.name","datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn"},"workflowConfig":{"timeStarted.$":"$$.State.EnteredTime"}}},"Filters
            Not Required":{"Type":"Pass","Next":"Check for Solutions"},"Check
            for
            Solutions":{"Type":"Choice","Choices":[{"Variable":"$.solutions[0]","IsPresent":true,"Next":"Create
            Solutions"}],"Default":"Solutions not Provided"},"Create
            Filters":{"Type":"Map","ResultPath":null,"Next":"Check for
            Solutions","Parameters":{"datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","filter.$":"$$.Map.Item.Value"},"Iterator":{"StartAt":"Prepare
            Filter Input Data","States":{"Prepare Filter Input
            Data":{"Type":"Pass","ResultPath":"$.filter.serviceConfig.datasetGroupArn","InputPath":"$.datasetGroupArn","Next":"Create
            Filter"},"Create
            Filter":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":8,"MaxAttempts":15,"BackoffRate":1.25}],"Type":"Task","InputPath":"$.filter","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - CreateFilterSolutionStepcreatefilterfnF2859FD9
            - Arn
          - >-
            "}}},"ItemsPath":"$.filters"},"Solutions not
            Provided":{"Type":"Pass","End":true},"Create
            Solutions":{"Type":"Map","ResultPath":null,"End":true,"Parameters":{"datasetGroupArn.$":"$.datasetGroup.serviceConfig.datasetGroupArn","datasetGroupName.$":"$.datasetGroup.serviceConfig.name","solution.$":"$$.Map.Item.Value","bucket.$":"$.bucket","currentDate.$":"$.currentDate"},"Iterator":{"StartAt":"Prepare
            Solution Input Data","States":{"Prepare Solution Input
            Data":{"Type":"Pass","ResultPath":"$.solution.serviceConfig.datasetGroupArn","InputPath":"$.datasetGroupArn","Next":"Create
            Solution"},"Create Solution":{"Next":"Prepare Solution Output
            Data","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$.solution","OutputPath":"$","ResultPath":"$._tmp","ResultSelector":{"solutionArn.$":"$.solutionArn"},"Resource":"
          - !GetAtt 
            - CreateSolutionSolutionStepcreatesolutionfn1F463E79
            - Arn
          - >-
            "},"Prepare Solution Output
            Data":{"Type":"Pass","ResultPath":"$.solution.serviceConfig.solutionArn","InputPath":"$._tmp.solutionArn","Next":"Check
            for Solution Version"},"Check for Solution
            Version":{"Type":"Choice","Choices":[{"Variable":"$.solution.solutionVersion","IsPresent":false,"Next":"Prepare
            Solution Version Input Data"}],"Default":"Create Solution
            Version"},"Create Solution Version":{"Next":"Prepare Solution
            Version Output
            Data","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Catch":[{"ErrorEquals":["SolutionVersionPending"],"ResultPath":"$.solutionVersionPending","Next":"Save
            Solution Version
            ID"}],"Type":"Task","InputPath":"$.solution.solutionVersion","OutputPath":"$","ResultPath":"$._tmp","ResultSelector":{"solutionVersionArn.$":"$.solutionVersionArn"},"Resource":"
          - !GetAtt 
            - CreateSolutionVersionSolutionStepcreatesolutionversionfn0681411E
            - Arn
          - >-
            "},"Set Solution Version
            ID":{"Type":"Pass","ResultPath":"$.solution.solutionVersion","Parameters":{"serviceConfig":{"trainingMode.$":"$.solution.solutionVersion.serviceConfig.trainingMode","solutionArn.$":"$.solution.solutionVersion.serviceConfig.solutionArn"},"workflowConfig":{"maxAge.$":"$.solution.solutionVersion.workflowConfig.maxAge","solutionVersionArn.$":"$._tmp.errorInfo.errorMessage","timeStarted.$":"$$.State.EnteredTime"}},"Next":"Create
            Solution Version"},"Save Solution Version
            ID":{"Type":"Pass","ResultPath":"$._tmp","Parameters":{"errorInfo.$":"States.StringToJson($.solutionVersionPending.Cause)"},"Next":"Set
            Solution Version ID"},"Prepare Solution Version Input
            Data":{"Type":"Pass","ResultPath":"$.solution.solutionVersion","Parameters":{"serviceConfig":{"solutionArn.$":"$.solution.serviceConfig.solutionArn","trainingMode":"FULL"},"workflowConfig":{"maxAge":"365
            days","timeStarted.$":"$$.State.EnteredTime"}},"Next":"Create
            Solution Version"},"Prepare Solution Version Output
            Data":{"Type":"Pass","ResultPath":"$.solution.solutionVersion.serviceConfig.solutionVersionArn","InputPath":"$._tmp.solutionVersionArn","Next":"Create
            Campaigns and Batch Inference Jobs"},"Create Campaigns and Batch
            Inference Jobs":{"Type":"Parallel","ResultPath":null,"Next":"Check
            if Solution Maintenance Full Schedule
            Required","Branches":[{"StartAt":"Check for
            Campaigns","States":{"Check for
            Campaigns":{"Type":"Choice","Choices":[{"Variable":"$.solution.campaigns[0]","IsPresent":true,"Next":"Create
            Campaigns"}],"Default":"Campaigns not Provided"},"Campaigns not
            Provided":{"Type":"Pass","End":true},"Create
            Campaigns":{"Type":"Map","End":true,"Parameters":{"solutionVersionArn.$":"$.solution.solutionVersion.serviceConfig.solutionVersionArn","campaign.$":"$$.Map.Item.Value"},"Iterator":{"StartAt":"Prepare
            Campaign Input Data","States":{"Prepare Campaign Input
            Data":{"Type":"Pass","ResultPath":"$.campaign.serviceConfig.solutionVersionArn","InputPath":"$.solutionVersionArn","Next":"Create
            Campaign"},"Create
            Campaign":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$.campaign","OutputPath":"$","ResultPath":"$.campaign.serviceConfig","Resource":"
          - !GetAtt 
            - CreateCampaignSolutionStepcreatecampaignfn5F83F6AB
            - Arn
          - >-
            "}}},"ItemsPath":"$.solution.campaigns"}}},{"StartAt":"Check for
            Batch Inference Jobs","States":{"Check for Batch Inference
            Jobs":{"Type":"Choice","Choices":[{"Variable":"$.solution.batchInferenceJobs[0]","IsPresent":true,"Next":"Create
            Batch Inference Jobs"}],"Default":"Batch Inference Jobs Not
            Provided"},"Batch Inference Jobs Not
            Provided":{"Type":"Pass","End":true},"Create Batch Inference
            Jobs":{"Type":"Map","End":true,"Parameters":{"solutionVersionArn.$":"$.solution.solutionVersion.serviceConfig.solutionVersionArn","batchInferenceJob.$":"$$.Map.Item.Value","batchInferenceJobName.$":"States.Format('batch_{}_{}',
            $.solution.serviceConfig.name,
            $.currentDate)","bucket.$":"$.bucket","currentDate.$":"$.currentDate","datasetGroupName.$":"$.datasetGroupName","datasetGroupArn.$":"$.datasetGroupArn","solution.$":"$.solution"},"Iterator":{"StartAt":"Set
            Batch Inference Job Input Data - Job Name","States":{"Set Batch
            Inference Job Input Data - Job
            Name":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.jobName","InputPath":"$.batchInferenceJobName","Next":"Set
            Batch Inference Job Input Data - Solution Version ARN"},"Set Batch
            Inference Job Input Data - Solution Version
            ARN":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.solutionVersionArn","InputPath":"$.solutionVersionArn","Next":"Set
            Batch Inference Job Input Data - Job Input"},"Set Batch Inference
            Job Input Data - Job
            Input":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.jobInput","Parameters":{"s3DataSource":{"path.$":"States.Format('s3://{}/batch/{}/{}/job_config.json',
            $.bucket.name, $.datasetGroupName,
            $.solution.serviceConfig.name)"}},"Next":"Set Batch Inference Job
            Input Data - Job Output"},"Set Batch Inference Job Input Data - Job
            Output":{"Type":"Pass","ResultPath":"$.batchInferenceJob.serviceConfig.jobOutput","Parameters":{"s3DataDestination":{"path.$":"States.Format('s3://{}/batch/{}/{}/{}/',
            $.bucket.name, $.datasetGroupName, $.solution.serviceConfig.name,
            $.batchInferenceJobName)"}},"Next":"Create Batch Inference
            Job"},"Create Batch Inference Job":{"Next":"Check if Batch Inference
            Schedule
            Required","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":60,"MaxAttempts":100,"BackoffRate":1.02}],"Type":"Task","InputPath":"$.batchInferenceJob","OutputPath":"$","ResultPath":"$.batchInferenceJob.serviceConfig","Resource":"
          - !GetAtt 
            - >-
              CreateBatchInferenceJobSolutionStepcreatebatchinferencejobfn8B4A8B4F
            - Arn
          - >-
            "},"Check if Batch Inference Schedule
            Required":{"Type":"Choice","Choices":[{"Variable":"$.batchInferenceJob.workflowConfig.schedule","IsPresent":true,"Next":"Create
            Schedule For Batch Inference"}],"Default":"Batch Inference Schedule
            Not Required"},"Batch Inference Schedule Not
            Required":{"Type":"Pass","End":true},"Create Schedule For Batch
            Inference":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - >-
              SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfn7FCB3878
            - Arn
          - >-
            ","Parameters":{"name.$":"States.Format('batch-inference-{}',
            $.solution.serviceConfig.name)","schedule.$":"$.batchInferenceJob.workflowConfig.schedule","state_machine":{"arn":"
          - !Ref ScheduledSolutionMaintenancePeriodicSolutionMaintenance814E56C3
          - >-
            ","input":{"bucket.$":"$.bucket","datasetGroup":{"serviceConfig":{"name.$":"$.datasetGroupName","datasetGroupArn.$":"$.datasetGroupArn"}},"solutions":[{"serviceConfig.$":"$.solution.serviceConfig","batchInferenceJobs":[{"serviceConfig.$":"$.batchInferenceJob.serviceConfig","workflowConfig":{"maxAge":"1
            second"}}]}]}}}}}},"ItemsPath":"$.solution.batchInferenceJobs"}}}]},"Check
            if Solution Maintenance Full Schedule
            Required":{"Type":"Choice","Choices":[{"Variable":"$.solution.workflowConfig.schedules.full","IsPresent":true,"Next":"Create
            Schedule For Solution Maintenance Full"}],"Default":"Solution
            Maintenance Full Schedule Not Required"},"Solution Maintenance Full
            Schedule Not Required":{"Type":"Pass","Next":"Check if Solution
            Maintenance Update Schedule Required"},"Check if Solution
            Maintenance Update Schedule
            Required":{"Type":"Choice","Choices":[{"Variable":"$.solution.workflowConfig.schedules.update","IsPresent":true,"Next":"Create
            Schedule For Solution Maintenance Update"}],"Default":"Solution
            Maintenance Update Schedule Not Required"},"Create Schedule For
            Solution Maintenance Full":{"Next":"Check if Solution Maintenance
            Update Schedule
            Required","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - >-
              SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfn7FCB3878
            - Arn
          - >-
            ","Parameters":{"name.$":"States.Format('solution-maintenance-full-{}',
            $.solution.serviceConfig.name)","schedule.$":"$.solution.workflowConfig.schedules.full","state_machine":{"arn":"
          - !Ref ScheduledSolutionMaintenancePeriodicSolutionMaintenance814E56C3
          - >-
            ","input":{"bucket.$":"$.bucket","datasetGroup":{"serviceConfig":{"name.$":"$.datasetGroupName","datasetGroupArn.$":"$.datasetGroupArn"}},"solutions":[{"serviceConfig.$":"$.solution.serviceConfig","solutionVersion":{"serviceConfig":{"trainingMode":"FULL","solutionArn.$":"$.solution.solutionVersion.serviceConfig.solutionArn"},"workflowConfig":{"maxAge":"1
            second"}},"campaigns.$":"$.solution.campaigns"}]}}}},"Solution
            Maintenance Update Schedule Not
            Required":{"Type":"Pass","End":true},"Create Schedule For Solution
            Maintenance
            Update":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":null,"Resource":"
          - !GetAtt 
            - >-
              SchedulercreatescheduledtaskSolutionStepcreatescheduledtaskfn7FCB3878
            - Arn
          - >-
            ","Parameters":{"name.$":"States.Format('solution-maintenance-update-{}',
            $.solution.serviceConfig.name)","schedule.$":"$.solution.workflowConfig.schedules.update","state_machine":{"arn":"
          - !Ref ScheduledSolutionMaintenancePeriodicSolutionMaintenance814E56C3
          - >-
            ","input":{"bucket.$":"$.bucket","datasetGroup":{"serviceConfig":{"name.$":"$.datasetGroupName","datasetGroupArn.$":"$.datasetGroupArn"}},"solutions":[{"serviceConfig.$":"$.solution.serviceConfig","solutionVersion":{"serviceConfig":{"trainingMode":"UPDATE","solutionArn.$":"$.solution.solutionVersion.serviceConfig.solutionArn"},"workflowConfig":{"maxAge":"1
            second"}},"campaigns.$":"$.solution.campaigns"}]}}}}}},"ItemsPath":"$.solutions"}}}]},"Success":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
            - Arn
          - >-
            ","Parameters":{"datasetGroup.$":"$[0].datasetGroup.serviceConfig.name"}},"Send
            Failure
            Message":{"Next":"Failure","Retry":[{"ErrorEquals":["Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["ResourcePending"],"IntervalSeconds":5,"MaxAttempts":5,"BackoffRate":1.05}],"Type":"Task","InputPath":"$","OutputPath":"$","ResultPath":"$","Resource":"
          - !GetAtt 
            - SNSNotificationSolutionStepsnsnotificationfn6973DEFB
            - Arn
          - >-
            ","Parameters":{"datasetGroup.$":"$.datasetGroup.serviceConfig.name","statesError.$":"$.statesError"}},"Failure":{"Type":"Fail"}}}
      StateMachineName: !GetAtt 
        - StateMachineNameStateMachineNameNameResource5B98B370
        - Name
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      TracingConfiguration:
        Enabled: true
    DependsOn:
      - PersonalizeStateMachineRoleDefaultPolicy849E454B
      - PersonalizeStateMachineRole801F53E1
  S3EventHandlerRole822B3D57:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  S3EventHandlerRoleDefaultPolicy4200EF33:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Effect: Allow
            Resource: '*'
          - Action:
              - 's3:GetObject*'
              - 's3:GetBucket*'
              - 's3:List*'
            Effect: Allow
            Resource:
              - !GetAtt 
                - PersonalizeBucket
                - Arn
              - !Join 
                - ''
                - - !GetAtt 
                    - PersonalizeBucket
                    - Arn
                  - /train/*
          - Action: 'states:StartExecution'
            Effect: Allow
            Resource: !Ref PersonalizeStateMachine739DC329
          - Action: 'sns:Publish'
            Effect: Allow
            Resource: !Ref NotificationTopic
        Version: 2012-10-17
      PolicyName: S3EventHandlerRoleDefaultPolicy4200EF33
      Roles:
        - !Ref S3EventHandlerRole822B3D57
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: IAM policy for AWS X-Ray requires an allow on *
  S3EventHandlerBAFC08A8:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - S3EventHandlerBAFC08A8.zip
      Role: !GetAtt 
        - S3EventHandlerRole822B3D57
        - Arn
      Environment:
        Variables:
          SOLUTION_NAME: maintaining-personalized-experiences-with-machine-learning
          SOLUTION_ID: SO0170
          SOLUTION_VERSION: v1.1.0
          LOG_LEVEL: INFO
          POWERTOOLS_SERVICE_NAME: Workflow
          POWERTOOLS_METRICS_NAMESPACE: !Join 
            - ''
            - - personalize_solution_
              - !Ref 'AWS::StackName'
          STATE_MACHINE_ARN: !Ref PersonalizeStateMachine739DC329
          SNS_TOPIC_ARN: !Ref NotificationTopic
      Handler: handler.lambda_handler
      Layers:
        - !Ref PowertoolsLayer8E932F0F197D4026A35423D184C2A624D967C184
        - !Ref SolutionsLayerDAE8E12F3DEA43FBA4AAE55AC50BD2E9B9D361F0
      Runtime: python3.9
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
      Timeout: 15
      TracingConfig:
        Mode: Active
    DependsOn:
      - S3EventHandlerRoleDefaultPolicy4200EF33
      - S3EventHandlerRole822B3D57
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join 
          - ''
          - - 'arn:'
            - !Ref 'AWS::Partition'
            - ':iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action: 's3:PutBucketNotification'
            Effect: Allow
            Resource: '*'
        Version: 2012-10-17
      PolicyName: >-
        BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
        - !Ref BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: >-
              bucket resource is '*' due to circular dependency with bucket and
              role creation at the same time
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: >-
        AWS CloudFormation handler for "Custom::S3BucketNotifications" resources
        (@aws-cdk/aws-s3)
      Code:
        ZipFile: >
          import boto3  # type: ignore

          import json

          import logging

          import urllib.request


          s3 = boto3.client("s3")


          CONFIGURATION_TYPES = ["TopicConfigurations", "QueueConfigurations",
          "LambdaFunctionConfigurations"]


          def handler(event: dict, context):
              response_status = "SUCCESS"
              error_message = ""
              try:
                  props = event["ResourceProperties"]
                  bucket = props["BucketName"]
                  notification_configuration = props["NotificationConfiguration"]
                  request_type = event["RequestType"]
                  managed = props.get('Managed', 'true').lower() == 'true'
                  stack_id = event['StackId']

                  if managed:
                    config = handle_managed(request_type, notification_configuration)
                  else:
                    config = handle_unmanaged(bucket, stack_id, request_type, notification_configuration)

                  put_bucket_notification_configuration(bucket, config)
              except Exception as e:
                  logging.exception("Failed to put bucket notification configuration")
                  response_status = "FAILED"
                  error_message = f"Error: {str(e)}. "
              finally:
                  submit_response(event, context, response_status, error_message)


          def handle_managed(request_type, notification_configuration):
            if request_type == 'Delete':
              return {}
            return notification_configuration


          def handle_unmanaged(bucket, stack_id, request_type,
          notification_configuration):

            # find external notifications
            external_notifications = find_external_notifications(bucket, stack_id)

            # if delete, that's all we need
            if request_type == 'Delete':
              return external_notifications

            def with_id(notification):
              notification['Id'] = f"{stack_id}-{hash(json.dumps(notification, sort_keys=True))}"
              return notification

            # otherwise, merge external with incoming config and augment with id
            notifications = {}
            for t in CONFIGURATION_TYPES:
              external = external_notifications.get(t, [])
              incoming = [with_id(n) for n in notification_configuration.get(t, [])]
              notifications[t] = external + incoming
            return notifications


          def find_external_notifications(bucket, stack_id):
            existing_notifications = get_bucket_notification_configuration(bucket)
            external_notifications = {}
            for t in CONFIGURATION_TYPES:
              # if the notification was created by us, we know what id to expect
              # so we can filter by it.
              external_notifications[t] = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f"{stack_id}-")]

            return external_notifications


          def get_bucket_notification_configuration(bucket):
            return s3.get_bucket_notification_configuration(Bucket=bucket)


          def put_bucket_notification_configuration(bucket,
          notification_configuration):
            s3.put_bucket_notification_configuration(Bucket=bucket, NotificationConfiguration=notification_configuration)


          def submit_response(event: dict, context, response_status: str,
          error_message: str):
              response_body = json.dumps(
                  {
                      "Status": response_status,
                      "Reason": f"{error_message}See the details in CloudWatch Log Stream: {context.log_stream_name}",
                      "PhysicalResourceId": event.get("PhysicalResourceId") or event["LogicalResourceId"],
                      "StackId": event["StackId"],
                      "RequestId": event["RequestId"],
                      "LogicalResourceId": event["LogicalResourceId"],
                      "NoEcho": False,
                  }
              ).encode("utf-8")
              headers = {"content-type": "", "content-length": str(len(response_body))}
              try:
                  req = urllib.request.Request(url=event["ResponseURL"], headers=headers, data=response_body, method="PUT")
                  with urllib.request.urlopen(req) as response:
                      print(response.read().decode("utf-8"))
                  print("Status code: " + response.reason)
              except Exception as e:
                  print("send(..) failed executing request.urlopen(..): " + str(e))
      Handler: index.handler
      Role: !GetAtt 
        - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
        - Arn
      Runtime: python3.7
      Timeout: 300
      Tags:
        - Key: SOLUTION_ID
          Value: SO0170
        - Key: SOLUTION_NAME
          Value: maintaining-personalized-experiences-with-machine-learning
        - Key: SOLUTION_VERSION
          Value: v1.1.0
    DependsOn:
      - >-
        BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: functions deployed by this solution do not require VPC access
          - id: W92
            reason: >-
              functions deployed by this solution do not require reserved
              concurrency
          - id: W58
            reason: >-
              functions deployed by this solution use custom policy to write to
              CloudWatch logs
  PersonalizeDashboard8555BE0F:
    Type: 'AWS::CloudWatch::Dashboard'
    Properties:
      DashboardBody: !Join 
        - ''
        - - >-
            {"start":"-PT1D","periodOverride":"auto","widgets":[{"type":"metric","width":12,"height":3,"x":0,"y":0,"properties":{"view":"singleValue","title":"Personalization
            Configurations Processed","region":"
          - !Ref 'AWS::Region'
          - '","metrics":[["personalize_solution_'
          - !Ref 'AWS::StackName'
          - >-
            ","ConfigurationsProcessed","service","Workflow",{"color":"#4682b4","label":"Processed","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","ConfigurationsProcessedSuccesses","service","Workflow",{"color":"#32cd32","label":"Succeeded","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","ConfigurationsProcessedFailures","service","Workflow",{"color":"#ff4500","label":"Failures","stat":"Sum"}]],"setPeriodToTimeRange":true}},{"type":"metric","width":12,"height":3,"x":0,"y":3,"properties":{"view":"singleValue","title":"Personalization
            Workflow Status","region":"
          - !Ref 'AWS::Region'
          - '","metrics":[["personalize_solution_'
          - !Ref 'AWS::StackName'
          - >-
            ","JobSuccess","service","Workflow",{"color":"#32cd32","label":"Workflow
            Jobs Succeeded","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","JobFailure","service","Workflow",{"color":"#ff4500","label":"Workflow
            Jobs Failed","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","JobsCreated","service","Scheduler",{"color":"#32cd32","label":"Scheduler
            Jobs Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","JobsDeleted","service","Scheduler",{"color":"#ff4500","label":"Scheduler
            Jobs
            Deleted","stat":"Sum"}]],"setPeriodToTimeRange":true}},{"type":"metric","width":12,"height":9,"x":0,"y":6,"properties":{"view":"singleValue","title":"Amazon
            Personalize Resources Created","region":"
          - !Ref 'AWS::Region'
          - '","metrics":[["personalize_solution_'
          - !Ref 'AWS::StackName'
          - >-
            ","DatasetGroupCreated","service","Workflow",{"label":"Dataset
            Groups Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","DatasetCreated","service","Workflow",{"label":"Datasets
            Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","EventTrackerCreated","service","Workflow",{"label":"Event
            Trackers Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","SolutionCreated","service","Workflow",{"label":"Solutions
            Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","SolutionVersionCreated","service","Workflow",{"label":"Solution
            Versions Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","CampaignCreated","service","Workflow",{"label":"Campaigns
            Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","BatchInferenceJobCreated","service","Workflow",{"label":"Batch
            Inference Jobs Created","stat":"Sum"}],["personalize_solution_
          - !Ref 'AWS::StackName'
          - >-
            ","FilterCreated","service","Workflow",{"label":"Filters
            Created","stat":"Sum"}]],"setPeriodToTimeRange":true}},{"type":"text","width":6,"height":6,"x":12,"y":0,"properties":{"markdown":"\n#
            Quick Links\n\n| Link | Description |
            \n|-|-|\n|[button:primary:Personalize](https://console.aws.amazon.com/personalize/home?region=
          - !Ref 'AWS::Region'
          - >-
            #datasetGroups)|Check the status of your managed resources in Amazon
            Personalize|\n|[button:primary:S3](https://s3.console.aws.amazon.com/s3/buckets/
          - !Ref PersonalizeBucket
          - '?region='
          - !Ref 'AWS::Region'
          - >-
            &tab=objects)|Upload your workflow configuration and personalization
            data to S3 to trigger
            workflows|\n|[button:primary:Scheduler](https://console.aws.amazon.com/states/home?region=
          - !Ref 'AWS::Region'
          - '#/statemachines/view/arn:'
          - !Ref 'AWS::Partition'
          - ':states:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':stateMachine:'
          - !GetAtt 
            - >-
              SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
            - Name
          - >-
            ?statusFilter=RUNNING)|Check out the running scheduler jobs for your
            personalization workflow |\n"}}]}
      DashboardName: !Join 
        - ''
        - - PersonalizeSolution-
          - !Ref 'AWS::StackName'
          - '-'
          - !Ref 'AWS::Region'
  MetricsMetricsFunctionRoleA9C05594:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: 2012-10-17
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: !Join 
                  - ''
                  - - 'arn:'
                    - !Ref 'AWS::Partition'
                    - ':logs:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':log-group:/aws/lambda/*'
            Version: 2012-10-17
          PolicyName: LambdaFunctionServiceRolePolicy
  MetricsMetricsFunctionD6992891:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Join 
          - '-'
          - - !FindInMap 
              - SourceCode
              - General
              - S3Bucket
            - !Ref 'AWS::Region'
        S3Key: !Join 
          - /
          - - !FindInMap 
              - SourceCode
              - General
              - KeyPrefix
            - MetricsMetricsFunctionD6992891.zip
      Role: !GetAtt 
        - MetricsMetricsFunctionRoleA9C05594
        - Arn
      Handler: metrics.handler
      Runtime: python3.7
    DependsOn:
      - MetricsMetricsFunctionRoleA9C05594
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: This AWS Lambda Function is not deployed to a VPC
          - id: W92
            reason: This AWS Lambda Function does not require reserved concurrency
  SolutionMetricsAnonymousData:
    Type: 'Custom::AnonymousData'
    Properties:
      ServiceToken: !GetAtt 
        - MetricsMetricsFunctionD6992891
        - Arn
      Solution: maintaining-personalized-experiences-with-machine-learning
      Region: !Ref 'AWS::Region'
    Condition: SendAnonymousUsageData
Outputs:
  PersonalizeBucketName:
    Value: !Ref PersonalizeBucket
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-PersonalizeBucketName'
  SchedulerTableName:
    Value: !Ref PersonalizeScheduledTasks
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-SchedulerTableName'
  SchedulerStepFunctionArn:
    Value: !Join 
      - ''
      - - 'arn:'
        - !Ref 'AWS::Partition'
        - ':states:'
        - !Ref 'AWS::Region'
        - ':'
        - !Ref 'AWS::AccountId'
        - ':stateMachine:'
        - !GetAtt 
          - >-
            SchedulerSchedulerStateMachineNameSchedulerStateMachineNameNameResource958C6532
          - Name
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-SchedulerStepFunctionArn'
  Dashboard:
    Value: !Ref PersonalizeDashboard8555BE0F
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-Dashboard'
  SNSTopicArn:
    Value: !Ref NotificationTopic
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-SNSTopicArn'
  EventBusArn:
    Value: !GetAtt 
      - Notifications87298708
      - Arn
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-EventBusArn'
  CreateConfigFunctionArn:
    Value: !GetAtt 
      - CreateConfigF36C02E3
      - Arn
    Export:
      Name: !Join 
        - ''
        - - !Ref 'AWS::StackName'
          - '-CreateConfigFunctionArn'
